#!/bin/python3
import markdown
import sys
import argparse
import re
import os


def argument_parser() -> argparse.Namespace:
    """
    add the necessary arguments to the parser and return the parsed arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('-md', '--mdfile', help="Input MD file", type=str, required=True)
    parser.add_argument('-html', '--htmlfile', help="Output HTML file", type=str, required=True)
    args = parser.parse_args()
    return args

def readFile(file: str, mode: str='r'):
    with open(file, mode) as md:
        content = md.read()
    # print(content)
    return content


def writeFile(file: str, content: str, mode: str='w'):
    with open(file, mode) as md:
        md.write(content)


def getMatches(file: str, pattern: str=r'!\[\[(.*.)\]\]'):
    raw_content= readFile(file, 'r')
    matches = re.findall(pattern, raw_content)
    return matches


def replaceWith(file, replace_str, original_pattern=r'!\[\[(.*.)\]\]'):
    content = readFile(file)
    replaced_content = re.sub(original_pattern, replace_str, content)
    writeFile('replaced.md', replaced_content)
    return 'replaced.md'


def traverse_until_target(root: str, target: str, ignorePath: str = None):
    try:
        if not os.path.isdir(root):
            return None  # Ensure root is a directory

        for each in os.listdir(root):
            new_root = os.path.join(root, each)  # Cross-platform path handling

            # Check if current path matches the target
            if each == target and os.path.isfile(new_root):
                # print('== Found Target File! ==')
                return new_root

            # Recursively search in directories (except ignored ones)
            if os.path.isdir(new_root) and (ignorePath is None or new_root != ignorePath):
                result = traverse_until_target(new_root, target, ignorePath)
                if result: 
                    return result  # Stop once found

    except Exception as e:
        # print(f"Error: {e}")  # Avoid a bare except; print error for debugging
        pass

    return None  # Return None if not found


def imageFinder(img_title: str, img_path: str=None, scope: str="path"):
    """

    will search for img under given path

    it will visit all sub dir of path in search of that image, until found. So if you have multiple image with same name in same path, it will choose to have first one

    If scope is specified, it will override img_path
    scope can be : 'path', 'system', 'obsidian'
    'path' -> all sub dir under current path
    'user' -> search home dir
    'obsidian' -> backward search till first obsidian vault found
    """
    if not img_path or not os.path.isdir(img_path):
        img_path = os.getcwd()
    img_path = os.path.abspath(img_path)
    
    result = traverse_until_target(img_path, img_title)
    if result:
        return result
    if not result and scope == "home":
        new_path = os.path.dirname(img_path)
        old_path = img_path
        while os.path.expanduser('~') in new_path:
            result = traverse_until_target(new_path, img_title, old_path)
            if result:
                return result
            old_path = new_path
            new_path = os.path.dirname(new_path)
            


def main():
    args = argument_parser()
    file = args.mdfile
    matches = getMatches(file)
    for match in matches:
        getfile = imageFinder(match, scope="home")
        replace_txt = fr'\n<img src="{getfile}" alt="{os.path.basename(getfile)}">\n'
        newfile = replaceWith(file,replace_txt)
        file = newfile
    
    markdown.markdownFromFile(input=file, extensions=['fenced_code'], output=args.htmlfile)

if __name__ == "__main__":
    main()

